name: .NET Core

# Trigger on any push with a git tag
# To create a git tag, run the following commands on the branch you wish to release:
#   git tag 1.0.0.0
#   git push origin --tags
on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: windows-latest

    env:
      Release_Archive: WvW_Status.zip
      Project_Directory: WvW_Status

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore --output ./$env:Project_Directory/bin/Release

      # Archive the package
      - name: Create archive
        run: Compress-Archive -Path $env:Project_Directory\bin\Release\* -DestinationPath $env:Project_Directory\bin\$env:Release_Archive

      # Get the name of the tag that was pushed
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${$GITHUB_REF/refs\/tags\//}

      # Create the release:  https://github.com/actions/create-release
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: build-release.x64
          release_name: ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      # Upload release asset:   https://github.com/actions/upload-release-asset
      - name: Update release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ env.Project_Directory }}\bin\${{ env.Release_Archive }}
          asset_name: ${{ env.Release_Archive }}
          asset_content_type: application/zip
